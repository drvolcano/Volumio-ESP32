#include "Inflate.h"
#include "Stream.h"


class ByteStream : public Stream
{
public:
    ByteStream(const unsigned char *data, int count) : length(count)
    {
        array = data;
        position = 0;
    }

    // Stream methods
    virtual int available() { return length - position; }
    virtual int read() { return position < length ? array[position++] : -1; }
    virtual int peek() { return position < length ? array[position] : -1; }
    virtual void flush(){};

    //Print methods
    virtual size_t write(uint8_t c){};
    unsigned int length;

private:
    const unsigned char *array;
    unsigned int position;
};

//Achtung
//#define LEN_DISTBUFFER 32768
//#define LEN_DISTBUFFER 10000

/*
Inflate inflater;

//Uncompressed (Lorem ipsum)
const unsigned char test1[] = {0x01,0x4F,0x02,0xB0,0xFD,0x4C,0x6F,0x72,0x65,0x6D,0x20,0x69,0x70,0x73,0x75,0x6D,0x20,0x64,0x6F,0x6C,0x6F,0x72,0x20,0x73,0x69,0x74,0x20,0x61,0x6D,0x65,0x74,0x2C,0x20,0x63,0x6F,0x6E,0x73,0x65,0x74,0x65,0x74,0x75,0x72,0x20,0x73,0x61,0x64,0x69,0x70,0x73,0x63,0x69,0x6E,0x67,0x20,0x65,0x6C,0x69,0x74,0x72,0x2C,0x20,0x73,0x65,0x64,0x20,0x64,0x69,0x61,0x6D,0x20,0x6E,0x6F,0x6E,0x75,0x6D,0x79,0x20,0x65,0x69,0x72,0x6D,0x6F,0x64,0x20,0x74,0x65,0x6D,0x70,0x6F,0x72,0x20,0x69,0x6E,0x76,0x69,0x64,0x75,0x6E,0x74,0x20,0x75,0x74,0x20,0x6C,0x61,0x62,0x6F,0x72,0x65,0x20,0x65,0x74,0x20,0x64,0x6F,0x6C,0x6F,0x72,0x65,0x20,0x6D,0x61,0x67,0x6E,0x61,0x20,0x61,0x6C,0x69,0x71,0x75,0x79,0x61,0x6D,0x20,0x65,0x72,0x61,0x74,0x2C,0x20,0x73,0x65,0x64,0x20,0x64,0x69,0x61,0x6D,0x20,0x76,0x6F,0x6C,0x75,0x70,0x74,0x75,0x61,0x2E,0x20,0x41,0x74,0x20,0x76,0x65,0x72,0x6F,0x20,0x65,0x6F,0x73,0x20,0x65,0x74,0x20,0x61,0x63,0x63,0x75,0x73,0x61,0x6D,0x20,0x65,0x74,0x20,0x6A,0x75,0x73,0x74,0x6F,0x20,0x64,0x75,0x6F,0x20,0x64,0x6F,0x6C,0x6F,0x72,0x65,0x73,0x20,0x65,0x74,0x20,0x65,0x61,0x20,0x72,0x65,0x62,0x75,0x6D,0x2E,0x20,0x53,0x74,0x65,0x74,0x20,0x63,0x6C,0x69,0x74,0x61,0x20,0x6B,0x61,0x73,0x64,0x20,0x67,0x75,0x62,0x65,0x72,0x67,0x72,0x65,0x6E,0x2C,0x20,0x6E,0x6F,0x20,0x73,0x65,0x61,0x20,0x74,0x61,0x6B,0x69,0x6D,0x61,0x74,0x61,0x20,0x73,0x61,0x6E,0x63,0x74,0x75,0x73,0x20,0x65,0x73,0x74,0x20,0x4C,0x6F,0x72,0x65,0x6D,0x20,0x69,0x70,0x73,0x75,0x6D,0x20,0x64,0x6F,0x6C,0x6F,0x72,0x20,0x73,0x69,0x74,0x20,0x61,0x6D,0x65,0x74,0x2E,0x20,0x4C,0x6F,0x72,0x65,0x6D,0x20,0x69,0x70,0x73,0x75,0x6D,0x20,0x64,0x6F,0x6C,0x6F,0x72,0x20,0x73,0x69,0x74,0x20,0x61,0x6D,0x65,0x74,0x2C,0x20,0x63,0x6F,0x6E,0x73,0x65,0x74,0x65,0x74,0x75,0x72,0x20,0x73,0x61,0x64,0x69,0x70,0x73,0x63,0x69,0x6E,0x67,0x20,0x65,0x6C,0x69,0x74,0x72,0x2C,0x20,0x73,0x65,0x64,0x20,0x64,0x69,0x61,0x6D,0x20,0x6E,0x6F,0x6E,0x75,0x6D,0x79,0x20,0x65,0x69,0x72,0x6D,0x6F,0x64,0x20,0x74,0x65,0x6D,0x70,0x6F,0x72,0x20,0x69,0x6E,0x76,0x69,0x64,0x75,0x6E,0x74,0x20,0x75,0x74,0x20,0x6C,0x61,0x62,0x6F,0x72,0x65,0x20,0x65,0x74,0x20,0x64,0x6F,0x6C,0x6F,0x72,0x65,0x20,0x6D,0x61,0x67,0x6E,0x61,0x20,0x61,0x6C,0x69,0x71,0x75,0x79,0x61,0x6D,0x20,0x65,0x72,0x61,0x74,0x2C,0x20,0x73,0x65,0x64,0x20,0x64,0x69,0x61,0x6D,0x20,0x76,0x6F,0x6C,0x75,0x70,0x74,0x75,0x61,0x2E,0x20,0x41,0x74,0x20,0x76,0x65,0x72,0x6F,0x20,0x65,0x6F,0x73,0x20,0x65,0x74,0x20,0x61,0x63,0x63,0x75,0x73,0x61,0x6D,0x20,0x65,0x74,0x20,0x6A,0x75,0x73,0x74,0x6F,0x20,0x64,0x75,0x6F,0x20,0x64,0x6F,0x6C,0x6F,0x72,0x65,0x73,0x20,0x65,0x74,0x20,0x65,0x61,0x20,0x72,0x65,0x62,0x75,0x6D,0x2E,0x20,0x53,0x74,0x65,0x74,0x20,0x63,0x6C,0x69,0x74,0x61,0x20,0x6B,0x61,0x73,0x64,0x20,0x67,0x75,0x62,0x65,0x72,0x67,0x72,0x65,0x6E,0x2C,0x20,0x6E,0x6F,0x20,0x73,0x65,0x61,0x20,0x74,0x61,0x6B,0x69,0x6D,0x61,0x74,0x61,0x20,0x73,0x61,0x6E,0x63,0x74,0x75,0x73,0x20,0x65,0x73,0x74,0x20,0x4C,0x6F,0x72,0x65,0x6D,0x20,0x69,0x70,0x73,0x75,0x6D,0x20,0x64,0x6F,0x6C,0x6F,0x72,0x20,0x73,0x69,0x74,0x20,0x61,0x6D,0x65,0x74,0x2E,};

//Fixed Huffman (Hallo Welt (multiple times))
const unsigned char test2[] = {243, 72, 204, 201, 201, 87, 8, 79, 205, 41, 81, 240, 24, 32, 38, 0};

//Dynamic Hufffman (Lorem ipsum)
const unsigned char test3[] = {0xED,0x90,0xC1,0x6D,0x03,0x31,0x0C,0x04,0x5B,0xD9,0x02,0x0E,0xD7,0x83,0xFF,0xFE,0xA5,0x02,0x9E,0x44,0x1C,0x18,0x8B,0xE2,0x59,0x22,0x0F,0x70,0xF7,0xA1,0xE3,0x3C,0xFC,0x49,0x2A,0xC8,0x97,0xCB,0x9D,0x5D,0xEC,0xD5,0x06,0x2B,0xE4,0x98,0xA1,0xA8,0xD6,0x6C,0x60,0x8A,0x83,0x94,0x7D,0x41,0xB1,0x3E,0xD9,0xD9,0x23,0x8F,0x54,0xF3,0xA7,0x48,0xDF,0xC1,0x4D,0x7C,0x2C,0x98,0x5C,0x51,0x85,0x14,0xDD,0x7A,0xE8,0x03,0x2C,0x43,0xAD,0xC2,0x59,0x8F,0x84,0x48,0x3F,0xA5,0x46,0x77,0x84,0xA3,0xD1,0x96,0x21,0x60,0x7F,0x05,0x30,0x94,0xF6,0x4E,0xA0,0x26,0xF7,0x78,0x24,0x80,0x07,0xF9,0x1B,0xEF,0xB4,0x16,0x87,0x07,0xAD,0xB8,0x38,0x4E,0x1E,0x06,0xB6,0xF9,0x74,0x53,0x29,0x31,0x9F,0xFF,0x8E,0xCF,0x98,0x6E,0xA8,0x61,0x3F,0xC8,0x6F,0x9D,0x09,0x83,0xB7,0xD0,0x15,0x1F,0x59,0x1A,0x25,0x7B,0x12,0x6E,0x34,0x2B,0xF6,0xD8,0x78,0xEC,0x83,0xFB,0x92,0x6D,0x33,0x89,0xE0,0x74,0x13,0xA5,0xD4,0x27,0xF5,0xE2,0x91,0xFE,0xE9,0xB8,0xFE,0xBA,0xC5,0xFA,0x87,0xF6,0xBF,0xD3,0xDB,0x4E,0x5F,};

void testInflate()
{
    ByteStream testStream1(test1, sizeof(test1));
    ByteStream testStream2(test2, sizeof(test2));
    ByteStream testStream3(test3, sizeof(test3));

    Serial.println("");
    Serial.println("Test1:");

    inflater.initialize(&testStream1, testStream1.length);

    while (!inflater.getDone())
        inflater.readChar();

    Serial.println("");
    Serial.print("DONE");
    Serial.println("");
    inflater.finalize();

    Serial.println("");
    Serial.println("Test2:");
    inflater.initialize(&testStream2, testStream2.length);

    while (!inflater.getDone())
        inflater.readChar();

    Serial.println("");
    Serial.print("DONE");
    Serial.println("");
    inflater.finalize();

    Serial.println("");
    Serial.println("Test3:");
    inflater.initialize(&testStream3, testStream3.length);

    while (!inflater.getDone())
        inflater.readChar();

    Serial.println("");
    Serial.print("DONE");
    Serial.println("");
    inflater.finalize();

}*/